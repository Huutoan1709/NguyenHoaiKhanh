import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { name, email, subject, message, phone } = await request.json();

    // Validate required fields
    if (!name || !email || !message) {
      return NextResponse.json(
        { success: false, error: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc (t√™n, email, tin nh·∫Øn)' },
        { status: 400 }
      );
    }

    // Validate name
    if (name.trim().length < 2) {
      return NextResponse.json(
        { success: false, error: 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±' },
        { status: 400 }
      );
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { success: false, error: 'ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá' },
        { status: 400 }
      );
    }

    // Message validation
    if (message.trim().length < 10) {
      return NextResponse.json(
        { success: false, error: 'N·ªôi dung tin nh·∫Øn ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' },
        { status: 400 }
      );
    }

    if (message.trim().length > 1000) {
      return NextResponse.json(
        { success: false, error: 'N·ªôi dung tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 1000 k√Ω t·ª±' },
        { status: 400 }
      );
    }

    // Get client info
    const userAgent = request.headers.get('user-agent') || 'Unknown';
    const forwarded = request.headers.get('x-forwarded-for');
    const ip = forwarded ? forwarded.split(',')[0] : 'Unknown';

    // Log the contact form submission with detailed info
    const contactData = {
      timestamp: new Date().toISOString(),
      vietnamTime: new Date().toLocaleString('vi-VN', { 
        timeZone: 'Asia/Ho_Chi_Minh',
        weekday: 'long',
        year: 'numeric',
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      }),
      name: name.trim(),
      email: email.trim(),
      phone: phone?.trim() || 'Kh√¥ng cung c·∫•p',
      subject: subject?.trim() || 'Kh√¥ng c√≥ ch·ªß ƒë·ªÅ',
      message: message.trim(),
      technical: {
        ip,
        userAgent,
        messageLength: message.trim().length,
        hasPhone: !!phone?.trim(),
        hasSubject: !!subject?.trim()
      }
    };

    console.log('üìß ==============================================');
    console.log('üìß TIN NH·∫ÆN M·ªöI T·ª™ WEBSITE');
    console.log('üìß ==============================================');
    console.log(`‚è∞ Th·ªùi gian: ${contactData.vietnamTime}`);
    console.log(`üë§ H·ªç t√™n: ${contactData.name}`);
    console.log(`üìß Email: ${contactData.email}`);
    console.log(`üì± ƒêi·ªán tho·∫°i: ${contactData.phone}`);
    console.log(`üìã Ch·ªß ƒë·ªÅ: ${contactData.subject}`);
    console.log('üí¨ N·ªôi dung:');
    console.log('‚îÄ'.repeat(50));
    console.log(contactData.message);
    console.log('‚îÄ'.repeat(50));
    console.log(`üåê IP: ${contactData.technical.ip}`);
    console.log(`üìä ƒê·ªô d√†i tin nh·∫Øn: ${contactData.technical.messageLength} k√Ω t·ª±`);
    console.log('üìß ==============================================');

    // Simulate email processing time
    await new Promise(resolve => setTimeout(resolve, 1500));

    // TODO: Replace with actual email sending when nodemailer is configured
    // For production, integrate with:
    // - Nodemailer + Gmail SMTP
    // - SendGrid API
    // - AWS SES
    // - Or other email service

    return NextResponse.json({
      success: true,
      message: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá.',
      data: {
        timestamp: contactData.timestamp,
        vietnamTime: contactData.vietnamTime,
        messageId: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` // Generate unique message ID
      }
    });

  } catch (error: any) {
    console.error('‚ùå Contact form error:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: 'C√≥ l·ªói h·ªá th·ªëng x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp qua email/ƒëi·ªán tho·∫°i.' 
      },
      { status: 500 }
    );
  }
}

// Handle other HTTP methods
export async function GET() {
  return NextResponse.json(
    { error: 'Method not allowed. Please use POST to submit contact form.' },
    { status: 405 }
  );
}